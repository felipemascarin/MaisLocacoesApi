// <auto-generated />
using System;
using MaisLocacoes.WebApi.DataBase.Context.Adm;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MaisLocacoes.WebApi.Migrations
{
    [DbContext(typeof(DataBaseContextAdm))]
    partial class DataBaseContextAdmModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MaisLocacoes.WebApi._3Repository.v1.Entity.UserSchema.CompanyUserEntity", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Cnpj")
                        .HasMaxLength(14)
                        .HasColumnType("char(14)");

                    b.HasKey("Email", "Cnpj");

                    b.HasIndex("Cnpj");

                    b.ToTable("CompaniesUsers");
                });

            modelBuilder.Entity("MaisLocacoes.WebApi.Repository.v1.Entity.UserSchema.CompanyAddressEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Cep")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Complement")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Country")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("District")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Number")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("State")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Street")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("CompaniesAddresses");
                });

            modelBuilder.Entity("Repository.v1.Entity.UserSchema.CompanyEntity", b =>
                {
                    b.Property<string>("Cnpj")
                        .HasMaxLength(14)
                        .HasColumnType("char(14)");

                    b.Property<string>("AddressDocumentUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("Cel")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("CompanyAddressId")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("DataBase")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FantasyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("NotifyDaysBefore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("PjDocumentUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("Segment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("StateRegister")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasDefaultValue("regular");

                    b.Property<string>("Tel")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Cnpj");

                    b.HasIndex("CompanyAddressId");

                    b.HasIndex("CompanyName")
                        .IsUnique();

                    b.HasIndex("DataBase")
                        .IsUnique();

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Repository.v1.Entity.UserSchema.UserEntity", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("BornDate")
                        .HasColumnType("date");

                    b.Property<string>("Cel")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CivilStatus")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CompanyCnpj")
                        .HasColumnType("char(14)");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("char(11)");

                    b.Property<string>("CpfDocumentUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("LastToken")
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ProfileImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("Rg")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasDefaultValue("regular");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Email");

                    b.HasIndex("CompanyCnpj");

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MaisLocacoes.WebApi._3Repository.v1.Entity.UserSchema.CompanyUserEntity", b =>
                {
                    b.HasOne("Repository.v1.Entity.UserSchema.CompanyEntity", "Company")
                        .WithMany("CompaniesUsers")
                        .HasForeignKey("Cnpj")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CompaniesUsers_Companies");

                    b.HasOne("Repository.v1.Entity.UserSchema.UserEntity", "User")
                        .WithMany("CompaniesUsers")
                        .HasForeignKey("Email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CompaniesUsers_Users");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.v1.Entity.UserSchema.CompanyEntity", b =>
                {
                    b.HasOne("MaisLocacoes.WebApi.Repository.v1.Entity.UserSchema.CompanyAddressEntity", "CompanyAddress")
                        .WithMany("Companies")
                        .HasForeignKey("CompanyAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Companies_CompaniesAddresses");

                    b.Navigation("CompanyAddress");
                });

            modelBuilder.Entity("Repository.v1.Entity.UserSchema.UserEntity", b =>
                {
                    b.HasOne("Repository.v1.Entity.UserSchema.CompanyEntity", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyCnpj");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("MaisLocacoes.WebApi.Repository.v1.Entity.UserSchema.CompanyAddressEntity", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("Repository.v1.Entity.UserSchema.CompanyEntity", b =>
                {
                    b.Navigation("CompaniesUsers");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Repository.v1.Entity.UserSchema.UserEntity", b =>
                {
                    b.Navigation("CompaniesUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
